// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: document.proto

package document_parser

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Document_ExtractTextFromDocument_FullMethodName = "/DocumentService.Document/ExtractTextFromDocument"
)

// DocumentClient is the client API for Document service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DocumentClient interface {
	ExtractTextFromDocument(ctx context.Context, in *ExtractRequest, opts ...grpc.CallOption) (Document_ExtractTextFromDocumentClient, error)
}

type documentClient struct {
	cc grpc.ClientConnInterface
}

func NewDocumentClient(cc grpc.ClientConnInterface) DocumentClient {
	return &documentClient{cc}
}

func (c *documentClient) ExtractTextFromDocument(ctx context.Context, in *ExtractRequest, opts ...grpc.CallOption) (Document_ExtractTextFromDocumentClient, error) {
	stream, err := c.cc.NewStream(ctx, &Document_ServiceDesc.Streams[0], Document_ExtractTextFromDocument_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &documentExtractTextFromDocumentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Document_ExtractTextFromDocumentClient interface {
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type documentExtractTextFromDocumentClient struct {
	grpc.ClientStream
}

func (x *documentExtractTextFromDocumentClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DocumentServer is the server API for Document service.
// All implementations must embed UnimplementedDocumentServer
// for forward compatibility
type DocumentServer interface {
	ExtractTextFromDocument(*ExtractRequest, Document_ExtractTextFromDocumentServer) error
	mustEmbedUnimplementedDocumentServer()
}

// UnimplementedDocumentServer must be embedded to have forward compatible implementations.
type UnimplementedDocumentServer struct {
}

func (UnimplementedDocumentServer) ExtractTextFromDocument(*ExtractRequest, Document_ExtractTextFromDocumentServer) error {
	return status.Errorf(codes.Unimplemented, "method ExtractTextFromDocument not implemented")
}
func (UnimplementedDocumentServer) mustEmbedUnimplementedDocumentServer() {}

// UnsafeDocumentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DocumentServer will
// result in compilation errors.
type UnsafeDocumentServer interface {
	mustEmbedUnimplementedDocumentServer()
}

func RegisterDocumentServer(s grpc.ServiceRegistrar, srv DocumentServer) {
	s.RegisterService(&Document_ServiceDesc, srv)
}

func _Document_ExtractTextFromDocument_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExtractRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DocumentServer).ExtractTextFromDocument(m, &documentExtractTextFromDocumentServer{stream})
}

type Document_ExtractTextFromDocumentServer interface {
	Send(*StreamResponse) error
	grpc.ServerStream
}

type documentExtractTextFromDocumentServer struct {
	grpc.ServerStream
}

func (x *documentExtractTextFromDocumentServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Document_ServiceDesc is the grpc.ServiceDesc for Document service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Document_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DocumentService.Document",
	HandlerType: (*DocumentServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExtractTextFromDocument",
			Handler:       _Document_ExtractTextFromDocument_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "document.proto",
}
