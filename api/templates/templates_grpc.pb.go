// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: templates.proto

package templates

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TemplatesStorage_CreateLink_FullMethodName              = "/TemplatesService.TemplatesStorage/CreateLink"
	TemplatesStorage_CreateTemplate_FullMethodName          = "/TemplatesService.TemplatesStorage/CreateTemplate"
	TemplatesStorage_DeleteTemplate_FullMethodName          = "/TemplatesService.TemplatesStorage/DeleteTemplate"
	TemplatesStorage_DeleteLink_FullMethodName              = "/TemplatesService.TemplatesStorage/DeleteLink"
	TemplatesStorage_GetAllTemplates_FullMethodName         = "/TemplatesService.TemplatesStorage/GetAllTemplates"
	TemplatesStorage_GetFeaturesByTemplateId_FullMethodName = "/TemplatesService.TemplatesStorage/GetFeaturesByTemplateId"
)

// TemplatesStorageClient is the client API for TemplatesStorage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TemplatesStorageClient interface {
	// Создание связи между фичами и шаблонами
	CreateLink(ctx context.Context, in *FeatureLinkTemplateStruct, opts ...grpc.CallOption) (*IdStruct, error)
	// Создание нового шаблона
	CreateTemplate(ctx context.Context, in *TemplateStruct, opts ...grpc.CallOption) (*IdStruct, error)
	// Удаление шаблона по id
	DeleteTemplate(ctx context.Context, in *IdStruct, opts ...grpc.CallOption) (*Empty, error)
	// Удаление связи между таблицами
	DeleteLink(ctx context.Context, in *FeatureLinkTemplateStruct, opts ...grpc.CallOption) (*Empty, error)
	// Получение всех шаблонов
	GetAllTemplates(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TemplatesList, error)
	GetFeaturesByTemplateId(ctx context.Context, in *IdStruct, opts ...grpc.CallOption) (*FeaturesList, error)
}

type templatesStorageClient struct {
	cc grpc.ClientConnInterface
}

func NewTemplatesStorageClient(cc grpc.ClientConnInterface) TemplatesStorageClient {
	return &templatesStorageClient{cc}
}

func (c *templatesStorageClient) CreateLink(ctx context.Context, in *FeatureLinkTemplateStruct, opts ...grpc.CallOption) (*IdStruct, error) {
	out := new(IdStruct)
	err := c.cc.Invoke(ctx, TemplatesStorage_CreateLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesStorageClient) CreateTemplate(ctx context.Context, in *TemplateStruct, opts ...grpc.CallOption) (*IdStruct, error) {
	out := new(IdStruct)
	err := c.cc.Invoke(ctx, TemplatesStorage_CreateTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesStorageClient) DeleteTemplate(ctx context.Context, in *IdStruct, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, TemplatesStorage_DeleteTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesStorageClient) DeleteLink(ctx context.Context, in *FeatureLinkTemplateStruct, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, TemplatesStorage_DeleteLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesStorageClient) GetAllTemplates(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TemplatesList, error) {
	out := new(TemplatesList)
	err := c.cc.Invoke(ctx, TemplatesStorage_GetAllTemplates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesStorageClient) GetFeaturesByTemplateId(ctx context.Context, in *IdStruct, opts ...grpc.CallOption) (*FeaturesList, error) {
	out := new(FeaturesList)
	err := c.cc.Invoke(ctx, TemplatesStorage_GetFeaturesByTemplateId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TemplatesStorageServer is the server API for TemplatesStorage service.
// All implementations must embed UnimplementedTemplatesStorageServer
// for forward compatibility
type TemplatesStorageServer interface {
	// Создание связи между фичами и шаблонами
	CreateLink(context.Context, *FeatureLinkTemplateStruct) (*IdStruct, error)
	// Создание нового шаблона
	CreateTemplate(context.Context, *TemplateStruct) (*IdStruct, error)
	// Удаление шаблона по id
	DeleteTemplate(context.Context, *IdStruct) (*Empty, error)
	// Удаление связи между таблицами
	DeleteLink(context.Context, *FeatureLinkTemplateStruct) (*Empty, error)
	// Получение всех шаблонов
	GetAllTemplates(context.Context, *Empty) (*TemplatesList, error)
	GetFeaturesByTemplateId(context.Context, *IdStruct) (*FeaturesList, error)
	mustEmbedUnimplementedTemplatesStorageServer()
}

// UnimplementedTemplatesStorageServer must be embedded to have forward compatible implementations.
type UnimplementedTemplatesStorageServer struct {
}

func (UnimplementedTemplatesStorageServer) CreateLink(context.Context, *FeatureLinkTemplateStruct) (*IdStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLink not implemented")
}
func (UnimplementedTemplatesStorageServer) CreateTemplate(context.Context, *TemplateStruct) (*IdStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemplate not implemented")
}
func (UnimplementedTemplatesStorageServer) DeleteTemplate(context.Context, *IdStruct) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplate not implemented")
}
func (UnimplementedTemplatesStorageServer) DeleteLink(context.Context, *FeatureLinkTemplateStruct) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLink not implemented")
}
func (UnimplementedTemplatesStorageServer) GetAllTemplates(context.Context, *Empty) (*TemplatesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTemplates not implemented")
}
func (UnimplementedTemplatesStorageServer) GetFeaturesByTemplateId(context.Context, *IdStruct) (*FeaturesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeaturesByTemplateId not implemented")
}
func (UnimplementedTemplatesStorageServer) mustEmbedUnimplementedTemplatesStorageServer() {}

// UnsafeTemplatesStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TemplatesStorageServer will
// result in compilation errors.
type UnsafeTemplatesStorageServer interface {
	mustEmbedUnimplementedTemplatesStorageServer()
}

func RegisterTemplatesStorageServer(s grpc.ServiceRegistrar, srv TemplatesStorageServer) {
	s.RegisterService(&TemplatesStorage_ServiceDesc, srv)
}

func _TemplatesStorage_CreateLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureLinkTemplateStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesStorageServer).CreateLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplatesStorage_CreateLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesStorageServer).CreateLink(ctx, req.(*FeatureLinkTemplateStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplatesStorage_CreateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesStorageServer).CreateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplatesStorage_CreateTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesStorageServer).CreateTemplate(ctx, req.(*TemplateStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplatesStorage_DeleteTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesStorageServer).DeleteTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplatesStorage_DeleteTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesStorageServer).DeleteTemplate(ctx, req.(*IdStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplatesStorage_DeleteLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureLinkTemplateStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesStorageServer).DeleteLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplatesStorage_DeleteLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesStorageServer).DeleteLink(ctx, req.(*FeatureLinkTemplateStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplatesStorage_GetAllTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesStorageServer).GetAllTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplatesStorage_GetAllTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesStorageServer).GetAllTemplates(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplatesStorage_GetFeaturesByTemplateId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesStorageServer).GetFeaturesByTemplateId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplatesStorage_GetFeaturesByTemplateId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesStorageServer).GetFeaturesByTemplateId(ctx, req.(*IdStruct))
	}
	return interceptor(ctx, in, info, handler)
}

// TemplatesStorage_ServiceDesc is the grpc.ServiceDesc for TemplatesStorage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TemplatesStorage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TemplatesService.TemplatesStorage",
	HandlerType: (*TemplatesStorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLink",
			Handler:    _TemplatesStorage_CreateLink_Handler,
		},
		{
			MethodName: "CreateTemplate",
			Handler:    _TemplatesStorage_CreateTemplate_Handler,
		},
		{
			MethodName: "DeleteTemplate",
			Handler:    _TemplatesStorage_DeleteTemplate_Handler,
		},
		{
			MethodName: "DeleteLink",
			Handler:    _TemplatesStorage_DeleteLink_Handler,
		},
		{
			MethodName: "GetAllTemplates",
			Handler:    _TemplatesStorage_GetAllTemplates_Handler,
		},
		{
			MethodName: "GetFeaturesByTemplateId",
			Handler:    _TemplatesStorage_GetFeaturesByTemplateId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "templates.proto",
}
