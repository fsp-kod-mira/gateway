// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: feature.proto

package feature

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Feature_AddPriority_FullMethodName  = "/FeatureService.Feature/AddPriority"
	Feature_AddFeature_FullMethodName   = "/FeatureService.Feature/AddFeature"
	Feature_DelPriority_FullMethodName  = "/FeatureService.Feature/DelPriority"
	Feature_DelFeature_FullMethodName   = "/FeatureService.Feature/DelFeature"
	Feature_EditPriority_FullMethodName = "/FeatureService.Feature/EditPriority"
	Feature_EditFeature_FullMethodName  = "/FeatureService.Feature/EditFeature"
	Feature_Get_FullMethodName          = "/FeatureService.Feature/Get"
)

// FeatureClient is the client API for Feature service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeatureClient interface {
	AddPriority(ctx context.Context, in *PriorityStruct, opts ...grpc.CallOption) (*PriorityStruct, error)
	AddFeature(ctx context.Context, in *FeatureStruct, opts ...grpc.CallOption) (*FeatureStruct, error)
	DelPriority(ctx context.Context, in *IdStruct, opts ...grpc.CallOption) (*Empty, error)
	DelFeature(ctx context.Context, in *IdStruct, opts ...grpc.CallOption) (*Empty, error)
	EditPriority(ctx context.Context, in *IdStruct, opts ...grpc.CallOption) (*Empty, error)
	EditFeature(ctx context.Context, in *IdStruct, opts ...grpc.CallOption) (*Empty, error)
	Get(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HibrydFeatureList, error)
}

type featureClient struct {
	cc grpc.ClientConnInterface
}

func NewFeatureClient(cc grpc.ClientConnInterface) FeatureClient {
	return &featureClient{cc}
}

func (c *featureClient) AddPriority(ctx context.Context, in *PriorityStruct, opts ...grpc.CallOption) (*PriorityStruct, error) {
	out := new(PriorityStruct)
	err := c.cc.Invoke(ctx, Feature_AddPriority_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureClient) AddFeature(ctx context.Context, in *FeatureStruct, opts ...grpc.CallOption) (*FeatureStruct, error) {
	out := new(FeatureStruct)
	err := c.cc.Invoke(ctx, Feature_AddFeature_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureClient) DelPriority(ctx context.Context, in *IdStruct, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Feature_DelPriority_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureClient) DelFeature(ctx context.Context, in *IdStruct, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Feature_DelFeature_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureClient) EditPriority(ctx context.Context, in *IdStruct, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Feature_EditPriority_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureClient) EditFeature(ctx context.Context, in *IdStruct, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Feature_EditFeature_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureClient) Get(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HibrydFeatureList, error) {
	out := new(HibrydFeatureList)
	err := c.cc.Invoke(ctx, Feature_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeatureServer is the server API for Feature service.
// All implementations must embed UnimplementedFeatureServer
// for forward compatibility
type FeatureServer interface {
	AddPriority(context.Context, *PriorityStruct) (*PriorityStruct, error)
	AddFeature(context.Context, *FeatureStruct) (*FeatureStruct, error)
	DelPriority(context.Context, *IdStruct) (*Empty, error)
	DelFeature(context.Context, *IdStruct) (*Empty, error)
	EditPriority(context.Context, *IdStruct) (*Empty, error)
	EditFeature(context.Context, *IdStruct) (*Empty, error)
	Get(context.Context, *Empty) (*HibrydFeatureList, error)
	mustEmbedUnimplementedFeatureServer()
}

// UnimplementedFeatureServer must be embedded to have forward compatible implementations.
type UnimplementedFeatureServer struct {
}

func (UnimplementedFeatureServer) AddPriority(context.Context, *PriorityStruct) (*PriorityStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPriority not implemented")
}
func (UnimplementedFeatureServer) AddFeature(context.Context, *FeatureStruct) (*FeatureStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFeature not implemented")
}
func (UnimplementedFeatureServer) DelPriority(context.Context, *IdStruct) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelPriority not implemented")
}
func (UnimplementedFeatureServer) DelFeature(context.Context, *IdStruct) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelFeature not implemented")
}
func (UnimplementedFeatureServer) EditPriority(context.Context, *IdStruct) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditPriority not implemented")
}
func (UnimplementedFeatureServer) EditFeature(context.Context, *IdStruct) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditFeature not implemented")
}
func (UnimplementedFeatureServer) Get(context.Context, *Empty) (*HibrydFeatureList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedFeatureServer) mustEmbedUnimplementedFeatureServer() {}

// UnsafeFeatureServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeatureServer will
// result in compilation errors.
type UnsafeFeatureServer interface {
	mustEmbedUnimplementedFeatureServer()
}

func RegisterFeatureServer(s grpc.ServiceRegistrar, srv FeatureServer) {
	s.RegisterService(&Feature_ServiceDesc, srv)
}

func _Feature_AddPriority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PriorityStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServer).AddPriority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feature_AddPriority_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServer).AddPriority(ctx, req.(*PriorityStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feature_AddFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServer).AddFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feature_AddFeature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServer).AddFeature(ctx, req.(*FeatureStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feature_DelPriority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServer).DelPriority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feature_DelPriority_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServer).DelPriority(ctx, req.(*IdStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feature_DelFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServer).DelFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feature_DelFeature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServer).DelFeature(ctx, req.(*IdStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feature_EditPriority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServer).EditPriority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feature_EditPriority_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServer).EditPriority(ctx, req.(*IdStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feature_EditFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServer).EditFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feature_EditFeature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServer).EditFeature(ctx, req.(*IdStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feature_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feature_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServer).Get(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Feature_ServiceDesc is the grpc.ServiceDesc for Feature service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Feature_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FeatureService.Feature",
	HandlerType: (*FeatureServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPriority",
			Handler:    _Feature_AddPriority_Handler,
		},
		{
			MethodName: "AddFeature",
			Handler:    _Feature_AddFeature_Handler,
		},
		{
			MethodName: "DelPriority",
			Handler:    _Feature_DelPriority_Handler,
		},
		{
			MethodName: "DelFeature",
			Handler:    _Feature_DelFeature_Handler,
		},
		{
			MethodName: "EditPriority",
			Handler:    _Feature_EditPriority_Handler,
		},
		{
			MethodName: "EditFeature",
			Handler:    _Feature_EditFeature_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Feature_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feature.proto",
}
